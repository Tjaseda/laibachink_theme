$cap: 1920px;
$des: 1550px;
$ml: 970px;
$m: 850px;
$s: 740px;
$xs: 500px;

@mixin breakpoint($point) {
  @if $point == large {
    @media (min-width: $des) { @content; }
  }
  @else if $point == desktopLarge {
    @media (max-width: $des) { @content; }
  }
  @else if $point == desktopLgMF {
    @media (min-width: $ml) { @content; }
  }
  @else if $point == mediumLarge {
    @media (max-width: $ml) { @content; }
  }
  @else if $point == medium {
    @media (max-width: $m) { @content; }
  }
  @else if $point == small {
    @media (max-width: $s) { @content; }
  }
  @else if $point == extrasmall {
    @media (max-width: $xs) { @content; }
  }
}


@mixin retinaBackground($file, $type) {
  @media (min-width: $des) {
    background-image: url($file + '-large.' + $type);
    @media (-webkit-min-device-pixel-ratio: 2),(min-resolution: 192dpi) {
      background-image: url($file + '-large-hi-dpi.' + $type);
    }
  }
  @media (max-width: $des) {
    background-image: url($file + '-desktop.' + $type);
    @media (-webkit-min-device-pixel-ratio: 2),(min-resolution: 192dpi) {
      background-image: url($file + '-desktop-hi-dpi.' + $type);
    }
  }
  @media (max-width: $s) {
    background-image: url($file + '-middle.' + $type);
    @media (-webkit-min-device-pixel-ratio: 2),(min-resolution: 192dpi) {
      background-image: url($file + '-middle-hi-dpi.' + $type);
    }
  }
}

@mixin transition($args) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}

@function calculateRem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}

@mixin font-size($size) {
  font-size: $size;
  font-size: calculateRem($size);
  line-height: $size + 4px;
}

@mixin clearfix {
  &::after {
    content: "";
    clear: both;
    display: table;
  }
}
